primus.write({action: 'join', room: parsed.code});

primus.id(function (_id) {
  id = _id
});

// print server message
primus.on('data', function(message) {

  var interval = setInterval(function() {

    if (message.data.length == 2 && id) {
      console.log(message.data, id, p)
      if (message.data.indexOf(id) == 0 && !p) {
        p = new Peer({initiator: true, trickle: false});

        p.on('error', function(err) {
          p = undefined
          offerSignal = false
        });

        p.on('connect', function() {
          console.log('CONNECT');
          p.send('whatever' + Math.random());
        });

        p.on('data', function(data) {
          console.log('data: ' + data);
        });

        p.on('signal', function(data) {
          if (!offerSignal) {
            primus.write({
              action: 'offerSignal',
              room: parsed.code,
              signal: data,
            });

            offerSignal = true;
          }
        });
      } else if (message.data.indexOf(id) == 1 && !p) {
        console.log('answer')

        p = new Peer({initiator: false, trickle: false});

        p.on('error', function(err) {
          p = undefined
          answerSignal = false
        });

        p.on('connect', function() {
          console.log('CONNECT');
          p.send('whatever' + Math.random());
        });

        p.on('data', function(data) {
          console.log('data: ' + data);
        });

        p.on('signal', function(data) {
          if (!answerSignal) {
            primus.write({
              action: 'answerSignal',
              room: parsed.code,
              signal: data,
            });

            answerSignal = true;
          }
        });

        if (message.signal.length) {
          p.signal(message.signal[0]);
        }
      }

      clearInterval(interval);
    }

  }, 20);

  switch (message.action) {
    case 'users':

      if (offerSignal && message.signal.length == 2 && message.signal[1].type == "answer") {
        p.signal(message.signal[1])
      }

      // offer
      if (message.data.length == 1 && !p) {
        p = new Peer({initiator: true, trickle: false});

        p.on('error', function(err) {
          p = undefined
          offerSignal = false
        });

        p.on('connect', function() {
          console.log('CONNECT');
          p.send('whatever' + Math.random());
        });

        p.on('data', function(data) {
          console.log('data: ' + data);
        });

        p.on('signal', function(data) {
          console.log(data)

          if (!offerSignal) {
            primus.write({
              action: 'offerSignal',
              room: parsed.code,
              signal: data,
            });

            offerSignal = true;
          }
        });
        // answer
      } else if (message.data.length == 2 && !p) {
        p = new Peer({initiator: false, trickle: false});

        p.on('error', function(err) {
          p = undefined
          answerSignal = false
        });

        p.on('connect', function() {
          console.log('CONNECT');
          p.send('whatever' + Math.random());
        });

        p.on('data', function(data) {
          console.log('data: ' + data);
        });

        p.on('signal', function(data) {
          if (!answerSignal) {
            primus.write({
              action: 'answerSignal',
              room: parsed.code,
              signal: data,
            });

            answerSignal = true;
          }
        });

        if (message.signal.length) {
          p.signal(message.signal[0]);
        }

      } else if (message.data.length == 2) {

      }
      break;
  }
});
